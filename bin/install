#!/usr/bin/perl
use strict;
use warnings;

my $os = $^O;
my $pjs_version = "1.5"

if ($os eq "linux") {
  check_root();
  my $version = `cat /proc/version`; 

  if ($version =~ /ubuntu/i) {
    print "detected UBUNTU\n";
    do_ubuntu();   
  } elsif ($version =~ /centos/i) {
    print "detected CENTOS";
    do_centos();
  }	
} elsif ($os =~m!win!i) {
  do_win();
} else {
  do_macos(); 
}


sub check_root {
  my $user = `whoami`;
  die "you must run this script as root" unless ($user eq "root");
}

sub do_win {
  my $url = "http://code.google.com/p/phantomjs/downloads/detail?name=phantomjs-1.4.1-win32-dynamic.zip&can=2&q=";
  print "Win32: you should download and unzip the files found at this URL:\r\n$url\r\n";
}

sub do_macos {
  my $url = "http://code.google.com/p/phantomjs/downloads/detail?name=phantomjs-1.4.1-macosx-static-x86.zip&can=2&q=";
  print "Mac OS: you should download and unzip the files found at this URL:\r\n$url\r\n";
}

sub do_ubuntu() {
  print "Installing dependencies ...\n";
  `apt-get --yes install git-core`;
  `apt-get --yes install g++`;  
  `apt-get --yes install qt4-qmake`; # not sure
  `apt-get --yes install libxext-dev`;
  `apt-get --yes install upx`;

  phantomjs_linux();
  xvfb_ubuntu();
  flash_ubuntu();
}

sub do_centos() { 
  print "Installing dependencies ...\n";
  `yum -y install git-core`;
  `yum -y install upx`;
 
  phantomjs_linux();
  xvfb_centos();
  flash_centos();
}

sub phantomjs_linux {
  print "Cloning phantomJS from GitHub ....\n";
  `git clone git://github.com/ariya/phantomjs.git`;
  `cd phantomjs && git checkout $pjs_version`;
  
  print "Building phantomJS ...\n";
  `cd phantomjs && ./deploy/build-linux.sh`;
}

sub flash_centos {
  `yum -y install curl compat-libstdc++-33 glibc nspluginwrapper`;
  `mkdir flash`;
  `cd flash && wget http://fpdownload.macromedia.com/get/flashplayer/pdc/11.1.102.55/flash-plugin-11.1.102.55-release.x86_64.rpm`;
  `cd flash && rpm -ivh ./*.rpm`;
  `rm -rf ./flash/`;
}

sub flash_ubuntu {
  `apt-get install flashplugin-nonfree`;  
}

sub xvfb_ubuntu {
  print "Installing Xvfb and fonts\n";
  `apt-get --yes install xvfb xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic`;
  create_xvfb_etc_script();
  `update-rc.d Xvfb defaults`;
}

sub xvfb_centos {
  print "Installing Xvfb and fonts\n";
  `yum -y xorg-x11-server-Xvf xorg-x11-server-Xorg xorg-x11-fonts`;
  create_xvfb_etc_script();
  `chkconfig --add Xvfb`;
}

sub create_xvfb_etc_script {
  my $xvfb_script = "/etc/init.d/Xvfb";
  print "Creating $xvfbRunScript\n";
  open(my $fh, ">", $xvfb_script) or die "Could not open $xvfb_script in write mode\n";
  print $fh xvfb_script();
  close $fh;
}

sub xvfb_script {
  return <<'EOD';
  #!/bin/sh  
  ### BEGIN INIT INFO
  # Provides: Xvfb
  # Required-Start: $local_fs $remote_fs
  # Required-Stop:
  # X-Start-Before:
  # Default-Start: 2 3 4 5
  # Default-Stop:
  ### END INIT INFO
  
  N=/etc/init.d/Xvfb
  
  set -e
  
  case "$1" in
    start)
  Xvfb :0 -screen 0 1024x768x24 &
  ;;
    stop|reload|restart|force-reload)
  ;;
    *)
  echo "Usage: $N {start|stop|restart|force-reload}" >&2
  exit 1
  ;;
  esac
  
  exit 0
EOD
}

