phantom.injectJs("phantom.js");/** * Used to simulate interactions with the page to load more resources */function Interactor(page) {	if (!(this instanceof arguments.callee)) return new Interactor(page);	this.page = page;		var template = ["function() { " + 		"	var eventTypes = ['",1,"']; " + 		"	var delay = ",3,", totalDelay = 0; " + 		"	var elements = document.querySelectorAll('",5,"'), report; " + 		"	var elementsCount = elements.length, " + 		"			eventTypesCount = eventTypes.length, " + 		"			sent = {}, " + 		"			event, i, j, eventType; " +		"	sent['total'] = 0; " + 		"	" + 		"	var getfn = function(event, element, delay) { " + 		"		return function() {" + 		// "			if (delay !== 0) { " +		// "				alert('EVENT type:' + event.type + ' element:' + element.tagName + ' delay:' + delay); " + 		// "			} " +		"			element.dispatchEvent(event); " +		"		};" + 		"	};" + 		"	" + 		"	for (i = 0; i < eventTypesCount; ++i) { " + 		"		eventType = eventTypes[i]; " + 		"		sent[eventType] = 0; " + 		"		" + 		"		event = document.createEvent('MouseEvents'); " + 		"		event.initMouseEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null); " + 		"		" + 		"		for (j = 0, sent[eventType] = 0; j < elementsCount; ++j) { " + 		"			if (elements[j] === null) { continue; } " + 		"			if (delay === 0) { " + 		"				elements[j].dispatchEvent(event); " + 		"			} else { " + 		"				totalDelay = totalDelay + delay; " +				"				setTimeout(getfn(event, elements[j], totalDelay), totalDelay); " + 		"			} " + 		"			sent[eventType]++; " + 		"			sent['total']++; " + 		"		} " + 		"	} " + 		"	" + 		"	return { 'elements': elementsCount, 'sent': sent }; " + 		"} "];		this.doIntercations = function(eventTypes, callback, querySelector, delay, afterDelay) {		if (querySelector === undefined) { querySelector = '*'; }		if (delay === undefined) { delay = 0; }		if (afterDelay === undefined) { afterDelay = 0; }				template[1] = eventTypes.join("', '");		template[3] = delay;		template[5] = querySelector;				var s = "(" + template.join('') + ")";		var func = eval(s);		var report = this.page.evaluate(func);				var wait = report.sent['total'] * delay;		debug(			"elements=" + report.elements + 			" events_sent=" + JSON.stringify(report.sent) + 			" total_delay=" + wait + "ms" +			" aditional_delay=" + afterDelay + "ms"		);		setTimeout(callback, wait + afterDelay);	};		this.sendMouseOver = function(callback, selector, delay, afterDelay) {		this.doIntercations(['mouseover'], callback, selector, delay, afterDelay);	};		this.clicks = function(step, random, timeout) {		if (random === undefined) { random == false; }		if (step === undefined) { step = 5; }		if (timeout === undefined) { timeout = 60*2*1000; }				var h = this.page.viewportSize.height,				w = this.page.viewportSize.width;		var totalClicks = Math.ceil((h/step)*(w/step));		var x, y, c = 0, p, np, cx, cy, s = Date.now(), interrupted = false;				if (timeout > 0) {			for (y=0; y<=h && !interrupted; y += step) {				for (x=0; x<=w && !interrupted; x += step) {					if (random) {						cx = Math.floor(Math.random()*w);						cy = Math.floor(Math.random()*h);					} else {						cx = x;						cy = y;					}					this.page.sendEvent('click', cx, cy);										np = Math.floor((++c*100)/totalClicks);					if (np != p && (np == 0 || np % 10 == 0)) {						debug("clicks:" + np + "% ");						if ((Date.now() - s) >= timeout) {							interrupted = true;						}					}					p = np;				}			}		}				return { 'duration' : (Date.now() - s), 'clicks' : c, 'scheduled' : totalClicks };	};		this.randomClicks = function(count) {		var c, x, y,			interactor = this,			s = Date.now(),			h = interactor.page.viewportSize.height, 			w = interactor.page.viewportSize.width;				for (c=0; c<count; ++c) {			x = Math.floor(Math.random()*w);			y = Math.floor(Math.random()*h);			//debug("c-" + x + "x" + y);			interactor.page.sendEvent('click', x, y);		}				return { 'duration' : (Date.now() - s), 'clicks' : c, };	};		this.fireUXListeners = function(client, reverse) { 		return client.fireUXListeners(reverse);	};}